# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end


  desc "Unit test"
  lane :unit_test_and_build do

      current_folder = Dir.pwd
        # Run your shell script commands here
        sh("echo 'Running shell script in #{current_folder}'")
        # Backtrack to the parent folder
       second_folder = File.expand_path("../..", current_folder)
#         check if the file exists then run the test class
        if File.exist?(second_folder)
            sh("echo 'Running shell script in #{second_folder}'")
            test_class = File.join(second_folder,"test","unit_test.dart")
            UI.message("Running unit test on #{test_class}")

            begin
             sh("flutter","pub","get")
             sh("flutter","--version")
            test_result  =  sh("flutter","test",test_class)


          if test_result

                 sh("flutter", "build", "apk", "--release", "--no-tree-shake-icons")

                 # Determine the source and destination paths relative to the project root
                 source_apk_relative = "build/app/outputs/flutter-apk/app-release.apk"
                 destination_dir_relative = "my_apk"

                 # Expand the paths to the absolute paths based on the project root
                 project_root = File.expand_path("../..", __dir__)  # Get the parent directory of the Fastlane folder
                 source_apk = File.expand_path(source_apk_relative, project_root)
                 destination_dir = File.expand_path(destination_dir_relative, project_root)

                 # Ensure the source APK file exists
                 unless File.exist?(source_apk)
                   UI.user_error!("APK file not found at '#{source_apk}'.")
                 end

                 # Create the destination directory if it doesn't exist
                 FileUtils.mkdir_p(destination_dir)

                 # Build the destination path
                 destination_apk = File.join(destination_dir, "app-release.apk")

                 # Move the APK file to the destination directory
                 FileUtils.mv(source_apk, destination_apk)

                 # Print a success message
                 UI.success("APK moved to '#{destination_apk}'.")
            end
          rescue => exception
                UI.user_error!("Unit test failed for #{exception.message}")
          end
        else
            UI.user_error!("No unit test file found")
        end

 end
end
